function getCookie(e){var t=document.cookie.match(new RegExp("(?:^|; )"+e.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g,"\\$1")+"=([^;]*)"));return t?decodeURIComponent(t[1]):void 0}function setCookie(e,t,n){n={path:"/"},n.expires&&(n.expires=n.expires.toUTCString());var o=encodeURIComponent(e)+"="+encodeURIComponent(t);for(var i in n){o+="; "+i;var s=n[i];s!==!0&&(o+="="+s)}document.cookie=o}function deleteCookie(e){setCookie(e,"",{"max-age":-1})}!function(e){"use strict";function t(){this.count=0,this.value=0,this._init()}t.prototype._init=function(){this.component=document.getElementById("reviewStarsComponent");var e=this;const t=new XMLHttpRequest,n="http://apirrm/api/votes/1";if(t.responseType="json",t.open("GET",n),t.setRequestHeader("Content-type","application/x-www-form-urlencoded"),t.addEventListener("readystatechange",function(){if(4===t.readyState&&200===t.status){var n=t.response;e.count=n.count,e.value=n.value,e.component.querySelectorAll(".votes-count")[0].innerHTML=n.count,document.getElementById("star-"+Math.floor(n.value)).checked=!0}}),t.send(),getCookie("setRaiting"))for(var o=1;o<=5;o++){var i=document.getElementById("star-"+o);i.disabled=!0}this._initUIActions},t.prototype._initUIActions=function(){},e.Raiting=t}(window),function(){for(var e=new Raiting,t=1;t<=5;t++){var n=document.getElementById("star-"+t);n.addEventListener("click",function(){if(!getCookie("setRaiting")){console.log("click");const t=new XMLHttpRequest;var n={};n.val=this.dataset.val;var o=JSON.stringify(n);const i="http://apirrm/api/votes/1";t.open("PUT",i),t.addEventListener("readystatechange",function(){if(4===t.readyState&&200===t.status){t.response;setCookie("setRaiting",1,{path:window.location}),e._init(),delete window.raitingComponent}}),t.send(o)}})}}(),function(e){"use strict";function t(e){this.value=e,this._init()}t.prototype._init=function(){this.component=document.getElementById("brogressbarComponent");var e=this.component.querySelectorAll("div span.progress-bar-fill"),t=Number(e[0].dataset.progressVal)+Number(this.value);t=t<=100?t:100,e[0].innerHTML=t+"%",e[0].dataset.progressVal=t,e[0].style.width=t+"%",console.log(t),this._initUIActions},t.prototype._initUIActions=function(){},e.Progressbar=t}(window),function(){var e=document.getElementById("go");e.addEventListener("click",function(){const e=document.getElementById("selectProgressbar");new Progressbar(e.options[e.selectedIndex].value)})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
